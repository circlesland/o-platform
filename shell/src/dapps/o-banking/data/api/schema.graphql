# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type ConsumeDepositedChallengeResponse {
    challenge: String
    success: Boolean!
}

type DelegateAuthInit {
    appId: String!
    challengeType: String
    delegateAuthCode: String
    errorMessage: String
    success: Boolean!
    validTo: String
}

type DepositChallengeResponse {
    errorMessage: String
    success: Boolean!
}

type ExchangeTokenResponse {
    errorMessage: String
    success: Boolean!
}

type IndexTransferResponse {
    errorMessage: String
    success: Boolean!
}

type LogoutResponse {
    errorMessage: String
    success: Boolean!
}

type Mutation {
    authenticateAt(appId: String!): DelegateAuthInit!
    consumeDepositedChallenge(delegateAuthCode: String!): ConsumeDepositedChallengeResponse!
    depositChallenge(jwt: String!): DepositChallengeResponse!
    exchangeToken: ExchangeTokenResponse!
    indexTransfer(data: IndexTransferInput!): IndexTransferResponse!
    logout: LogoutResponse!
    requestUpdateSafe(data: RequestUpdateSafeInput!): RequestUpdateSafeResponse!
    updateSafe(data: UpdateSafeInput!): UpdateSafeResponse!
    upsertProfile(data: UpsertProfileInput!): Profile!
}

type Profile {
    avatarCid: String
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    circlesSafeOwner: String
    circlesTokenAddress: String
    country: String
    dream: String
    firstName: String!
    id: Int!
    lastName: String
    newsletter: Boolean
}

type Query {
    profiles(query: QueryProfileInput!): [Profile!]!
    search(query: SearchInput!): [Profile!]!
    sessionInfo: SessionInfo!
    version: Version!
    whoami: String
}

type RequestUpdateSafeResponse {
    challenge: String
    errorMessage: String
    success: Boolean!
}

type Server {
    version: String!
}

type SessionInfo {
    hasProfile: Boolean
    isLoggedOn: Boolean!
    profileId: Int
}

type UpdateSafeResponse {
    errorMessage: String
    newSafeAddress: String
    success: Boolean!
}

type Version {
    major: Int!
    minor: Int!
    revision: Int!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

input DepositChallenge {
    jwt: String!
}

input IndexTransferInput {
    amount: String!
    blockNo: Int!
    from: String!
    message: String!
    to: String!
}

input QueryProfileInput {
    circlesAddress: [String!]
    country: String
    firstName: String
    id: Int
    lastName: String
}

input QueryUniqueProfileInput {
    id: Int!
}

input RequestUpdateSafeInput {
    newSafeAddress: String!
}

input SearchInput {
    searchString: String!
}

input UpdateSafeInput {
    signature: String!
}

input UpsertProfileInput {
    avatarCid: String
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    circlesSafeOwner: String
    circlesTokenAddress: String
    country: String
    dream: String
    emailAddress: String
    firstName: String!
    id: Int
    lastName: String
    newsletter: Boolean
}


"The `Upload` scalar type represents a file upload."
scalar Upload