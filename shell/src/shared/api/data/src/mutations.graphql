mutation upsertShippingAddress($data: PostAddressInput!) {
  upsertShippingAddress(data: $data) {
    id
    name
    street
    house
    zip
    cityGeonameid
    city
    state
    country
    notificationEmail
  }
}

mutation createPurchase($lines: [PurchaseLineInput!]!, $deliveryMethodId: Int!, $deliveryAddressId: Int) {
  purchase(lines: $lines, deliveryMethodId: $deliveryMethodId, deliveryAddressId: $deliveryAddressId) {
    id
    buyerAddress
    buyerProfile {
      id
      circlesAddress
      firstName
      lastName
      avatarUrl
    }
    sellerAddress
    sellerProfile {
      id
      circlesAddress
      firstName
      lastName
      avatarUrl
    }
    purchaseId
    lines {
      id
      amount
      offer {
        id
        version
        createdByAddress
        createdByProfile {
          id
          circlesAddress
          firstName
          lastName
          avatarUrl
        }
        pricePerUnit
        title
        description
      }
    }
  }
}

mutation requestSessionChallenge($address: String!) {
  requestSessionChallenge(address: $address)
}

mutation verifySessionChallenge($challenge: String!, $signature: String!) {
  verifySessionChallenge(challenge: $challenge, signature: $signature) {
    success
    errorMessage
  }
}

mutation addNewLang($langToCreate: String, $langToCopyFrom: String) {
  addNewLang(langToCreate: $langToCreate, langToCopyFrom: $langToCopyFrom)
}

mutation updateValue($lang: String, $key: String, $createdBy: String, $value: String) {
  updateValue(lang: $lang, key: $key, createdBy: $createdBy, value: $value) {
    lang
    key
    createdBy
    value
    version
  }
}

mutation createNewStringAndKey($lang: String, $key: String, $createdBy: String, $version: Int, $value: String) {
  createNewStringAndKey(lang: $lang, key: $key, createdBy: $createdBy, version: $version, value: $value) {
    lang
    key
    createdBy
    version
    value
    needsUpdate
  }
}

mutation setStringUpdateState($key: String) {
  setStringUpdateState(key: $key) {
    lang
    key
    createdBy
    version
    value
    needsUpdate
  }
}

mutation claimInvitation($code: String!) {
  claimInvitation(code: $code) {
    success
    claimedInvitation {
      createdAt
      createdByProfileId
      claimedAt
      claimedByProfileId
    }
  }
}

mutation acknowledge($until: Date!, $safeAddress: String) {
  acknowledge(until: $until, safeAddress: $safeAddress)
}

mutation sendMessage($fromSafeAddress: String, $toSafeAddress: String!, $content: String!) {
  sendMessage(fromSafeAddress: $fromSafeAddress, toSafeAddress: $toSafeAddress, content: $content) {
    success
    error
    event {
      block_number
      direction
      safe_address
      safe_address_profile {
        id
        firstName
        lastName
        avatarUrl
        circlesAddress
      }
      timestamp
      transaction_hash
      transaction_index
      type
      value
      tags {
        id
        typeId
        value
      }
      payload {
        ... on ChatMessage {
          id
          from
          from_profile {
            id
            firstName
            lastName
            avatarUrl
            circlesAddress
          }
          to
          to_profile {
            id
            firstName
            lastName
            avatarUrl
            circlesAddress
          }
          text
        }
      }
    }
  }
}

mutation addMember($groupId: String!, $memberAddress: String!) {
  addMember(groupId: $groupId, memberAddress: $memberAddress) {
    error
    success
  }
}
mutation removeMember($groupId: String!, $memberAddress: String!) {
  removeMember(groupId: $groupId, memberAddress: $memberAddress) {
    error
    success
  }
}

mutation redeemClaimedInvitation {
  redeemClaimedInvitation {
    success
    error
    transactionHash
  }
}

mutation logout {
  logout {
    success
  }
}

mutation tagTransaction($transactionHash: String!, $tag: CreateTagInput!) {
  tagTransaction(transactionHash: $transactionHash, tag: $tag) {
    success
    error
    tag {
      id
      typeId
      value
    }
  }
}

mutation upsertProfile(
  $id: Int
  $firstName: String!
  $lastName: String
  $emailAddress: String
  $askedForEmailAddress: Boolean!
  $dream: String
  $country: String
  $avatarUrl: String
  $avatarCid: String
  $avatarMimeType: String
  $circlesAddress: String
  $circlesSafeOwner: String
  $newsletter: Boolean
  $displayCurrency: DisplayCurrency
  $displayTimeCircles: Boolean
  $cityGeonameid: Int
  $status: String!
  $successorOfCirclesAddress: String
  $gender: Gender
  $age: Int
) {
  upsertProfile(
    data: {
      id: $id
      firstName: $firstName
      lastName: $lastName
      emailAddress: $emailAddress
      askedForEmailAddress: $askedForEmailAddress
      dream: $dream
      country: $country
      avatarUrl: $avatarUrl
      avatarCid: $avatarCid
      avatarMimeType: $avatarMimeType
      circlesAddress: $circlesAddress
      circlesSafeOwner: $circlesSafeOwner
      newsletter: $newsletter
      displayCurrency: $displayCurrency
      displayTimeCircles: $displayTimeCircles
      cityGeonameid: $cityGeonameid
      status: $status
      successorOfCirclesAddress: $successorOfCirclesAddress
      gender: $gender
      age: $age
    }
  ) {
    id
    circlesAddress
    displayCurrency
    circlesSafeOwner
    invitationLink
    successorOfCirclesAddress
    displayName
    firstName
    lastName
    emailAddress
    askedForEmailAddress
    dream
    country
    avatarUrl
    avatarCid
    avatarMimeType
    newsletter
    displayTimeCircles
    displayCurrency
    cityGeonameid
    age
    gender
    city {
      geonameid
      name
      country
      latitude
      longitude
      population
    }
    memberships {
      isAdmin
      organisation {
        id
        circlesAddress
        displayCurrency
        displayName
        circlesSafeOwner
        name
        description
        avatarUrl
        cityGeonameid
        city {
          geonameid
          country
          name
          population
        }
      }
    }
    verifications {
      createdAt
      revokedAt
      verifierSafeAddress
      verifierProfile {
        id
        circlesAddress
        displayCurrency
        avatarUrl
        name
        city {
          geonameid
          name
          country
        }
      }
    }
  }
}

mutation upsertOrganisation($organisation: UpsertOrganisationInput!) {
  upsertOrganisation(organisation: $organisation) {
    success
    error
    organisation {
      id
      avatarMimeType
      avatarUrl
      circlesAddress
      circlesSafeOwner
      cityGeonameid
      city {
        geonameid
        country
        name
        latitude
        longitude
        population
        feature_code
      }
      createdAt
      description
      name
    }
  }
}

mutation upsertRegion($organisation: UpsertOrganisationInput!) {
  upsertRegion(organisation: $organisation) {
    success
    error
    organisation {
      id
      avatarMimeType
      avatarUrl
      circlesAddress
      circlesSafeOwner
      cityGeonameid
      city {
        geonameid
        country
        name
        latitude
        longitude
        population
        feature_code
      }
      createdAt
      description
      name
    }
  }
}

mutation importOrganisations {
  importOrganisationsOfAccount {
    id
    circlesAddress
    name
    description
    avatarUrl
  }
}

mutation completePurchase($invoiceId: Int!, $revoke: Boolean) {
  completePurchase(invoiceId: $invoiceId, revoke: $revoke) {
    id
    sellerAddress
    paymentTransactionHash
    buyerAddress
    pickupCode
    buyerSignature
    buyerSignedDate
    sellerSignature
    sellerSignedDate
    purchase {
      id
    }
    sellerProfile {
      type
      id
      circlesAddress
      firstName
      lastName
      avatarUrl
    }
  }
}

mutation completeSale($invoiceId: Int!, $revoke: Boolean) {
  completeSale(invoiceId: $invoiceId, revoke: $revoke) {
    id
    sellerAddress
    paymentTransactionHash
    buyerAddress
    pickupCode
    buyerSignature
    buyerSignedDate
    sellerSignature
    sellerSignedDate
    sellerProfile {
      type
      id
      circlesAddress
      firstName
      lastName
      avatarUrl
    }
  }
}

mutation verifySafe($safeAddress: String!) {
  verifySafe(safeAddress: $safeAddress) {
    success
  }
}

mutation revokeSafeVerification($safeAddress: String!) {
  revokeSafeVerification(safeAddress: $safeAddress) {
    success
  }
}

mutation announcePayment($invoiceId: Int!, $transactionHash: String!) {
  announcePayment(invoiceId: $invoiceId, transactionHash: $transactionHash) {
    transactionHash
    invoiceId
    pickupCode
    simplePickupCode
  }
}

mutation upsertShop($shop: ShopInput!) {
  upsertShop(shop: $shop) {
    id
    name
    description
    legalText
    smallBannerUrl
    largeBannerUrl
    openingHours
    adultOnly
    private
    productListingStyle
    owner {
      id
      name
      avatarUrl
      circlesAddress
    }
    categories {
      id
      name
      description
      sortOrder
      enabled
      private
      largeBannerUrl
      smallBannerUrl
      productListingStyle
      createdAt
      entries {
        id
        sortOrder

        product {
          id
          version
          title
          description
          currentInventory
          pictureUrl
          pricePerUnit
          createdByProfile {
            id
            displayName
            avatarUrl
            circlesAddress
          }
        }
      }
    }
  }
}

mutation upsertShopCategories($shopCategories: [ShopCategoryInput!]!) {
  upsertShopCategories(shopCategories: $shopCategories) {
    inserted
    updated
  }
}

mutation upsertShopCategoryEntries($shopCategoryEntries: [ShopCategoryEntryInput!]!) {
  upsertShopCategoryEntries(shopCategoryEntries: $shopCategoryEntries) {
    inserted
    updated
  }
}

mutation confirmLegalAge($age: Int!) {
  confirmLegalAge(age: $age)
}

mutation upsertOffer($offer: OfferInput!) {
  upsertOffer(offer: $offer) {
    id
    version
    createdAt
    createdByAddress
    title
    description
    pictureUrl
    pricePerUnit
    minAge
    currentInventory
    timeCirclesPriceShare
    tags {
      typeId
      value
    }
  }
}

mutation proofUniqueness($humanodeToken: String!) {
  proofUniqueness(humanodeToken: $humanodeToken) {
    existingSafe
  }
}
