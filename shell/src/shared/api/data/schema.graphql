directive @cost(value: Int) on FIELD_DEFINITION

directive @costFactor(value: Int) on FIELD_DEFINITION

# A date and time value in JSON format.
scalar Date

type Server {
  version: String!
}

enum ProfileOrigin {
  CirclesGarden
  CirclesLand
  Unknown
}

enum ProfileType {
  PERSON
  ORGANISATION
  REGION
}

enum ProductListingType {
  TILES
  LIST
}

enum ShopListingStyle {
  REGULAR
  FEATURED
}

enum Gender {
  MALE
  FEMALE
  DIVERS
}

type Profile {
  id: Int!
  type: ProfileType
  origin: ProfileOrigin
  status: String
  circlesAddress: String
  successorOfCirclesAddress: String
  circlesSafeOwner: String
  circlesTokenAddress: String
  displayName: String
  firstName: String!
  lastName: String
  confirmedLegalAge: Int
  emailAddress: String
  askedForEmailAddress: Boolean!
  dream: String
  country: String
  avatarUrl: String
  largeBannerUrl: String
  smallBannerUrl: String
  productListingType: ProductListingType
  avatarCid: String
  avatarMimeType: String
  newsletter: Boolean
  displayTimeCircles: Boolean
  cityGeonameid: Int
  city: City
  claimedInvitation: ClaimedInvitation
  invitationTransaction: ProfileEvent
  invitationLink: String
  memberships: [Membership!]
  members: [Profile!]
  displayCurrency: DisplayCurrency
  verifications: [Verification!]
  offers: [Offer!]
  purchases: [Purchase!]
  sales: [Sale!]
  balances: ProfileBalances
  contacts: [Contact!]
  shops: [Shop!]
  shippingAddresses: [PostAddress!]
  provenUniqueness: Boolean
  age: Int
  gender: Gender
}

type City implements ICity {
  geonameid: Int!
  name: String!
  country: String!
  population: Int!
  latitude: Float!
  longitude: Float!
  feature_code: String!
}

type ClaimedInvitation {
  createdBy: Profile
  createdByProfileId: Int!
  createdAt: String!
  claimedBy: Profile
  claimedByProfileId: Int!
  claimedAt: String!
}

type ProfileEvent {
  timestamp: String!
  block_number: Int
  transaction_index: Int
  transaction_hash: String
  type: String!
  safe_address: String!
  safe_address_profile: Profile
  contact_address: String
  contact_address_profile: Profile
  direction: String!
  value: String
  payload: EventPayload
  tags: [Tag!]
}

type Membership {
  createdAt: String!
  createdBy: Profile
  createdByProfileId: Int!
  acceptedAt: String
  rejectedAt: String
  validTo: String
  isAdmin: Boolean!
  organisation: Organisation!
}

enum DisplayCurrency {
  CRC
  TIME_CRC
  EURS
}

type Verification {
  createdAt: String!
  verifierSafeAddress: String!
  verifierProfile: Organisation
  verifiedSafeAddress: String!
  verifiedProfile: Profile
  revokedAt: String
  revokedProfile: Profile
  verificationRewardTransactionHash: String!
  verificationRewardTransaction: ProfileEvent
}

type Offer {
  id: Int!
  version: Int!
  createdByProfile: Profile
  createdByAddress: String!
  createdAt: String!
  minAge: Int
  currentInventory: Int
  title: String!
  pictureUrl: String!
  pictureMimeType: String!
  description: String
  allergens: String
  pricePerUnit: String!
  timeCirclesPriceShare: Int!
  tags: [Tag!]
}

type Purchase {
  id: Int!
  createdByProfile: Profile
  createdByAddress: String!
  createdAt: String!
  deliveryMethod: DeliveryMethod!
  deliveryAddress: PostAddress
  total: String!
  lines: [PurchaseLine!]
  invoices: [Invoice!]
}

type Sale {
  id: Int!
  sellerAddress: String!
  sellerProfile: Profile
  buyerAddress: String!
  buyerProfile: Profile
  createdAt: String!
  total: String!
  lines: [SalesLine!]
  paymentTransaction: ProfileEvent
  invoices: [Invoice!]
}

type ProfileBalances {
  crcBalances: CrcBalances
  erc20Balances: Erc20Balances
}

type Contact {
  metadata: [ContactPoint!]!
  lastContactAt: String!
  contactAddress: String!
  contactAddress_Profile: Profile
}

type Shop {
  id: Int!
  createdAt: Date!
  private: Boolean
  enabled: Boolean
  name: String!
  description: String!
  legalText: String
  largeBannerUrl: String!
  smallBannerUrl: String!
  shopListingStyle: ShopListingStyle!
  sortOrder: Int
  productListingStyle: ProductListingType!
  purchaseMetaDataKeys: String
  ownerId: Int
  owner: Organisation!
  openingHours: String
  pickupAddress: PostAddress
  categories: [ShopCategory!]
  deliveryMethods: [DeliveryMethod!]
  privacyPolicyLink: String
  tosLink: String
  healthInfosLink: String
  adultOnly: Boolean
}

type PostAddress {
  id: Int!
  name: String
  street: String!
  house: String!
  zip: String!
  city: String!
  state: String
  country: String!
  notificationEmail: String
  osmId: String
  hereLocationId: String
  cityGeonameid: Int
}

type CrcBalances implements IAggregatePayload {
  lastUpdatedAt: String!
  total: String
  balances: [AssetBalance!]!
}

type Erc20Balances implements IAggregatePayload {
  lastUpdatedAt: String!
  balances: [AssetBalance!]!
}

type Organisation {
  id: Int!
  createdAt: String!
  circlesAddress: String
  circlesSafeOwner: String
  displayName: String
  name: String!
  description: String
  avatarUrl: String
  largeBannerUrl: String
  smallBannerUrl: String
  productListingType: ProductListingType
  avatarMimeType: String
  cityGeonameid: Int
  displayCurrency: DisplayCurrency
  city: City
  offers: [Offer!]
  members: [ProfileOrOrganisation!]
  shopEnabled: Boolean
  trustsYou: Int
  shops: [Shop!]
}

union ProfileOrOrganisation = Profile | Organisation

input QueryUniqueProfileInput {
  id: Int!
}

input QueryProfileInput {
  id: [Int!]
  firstName: String
  lastName: String
  country: String
  circlesAddress: [String!]
}

input SearchInput {
  searchString: String!
}

input UpsertProfileInput {
  id: Int
  status: String!
  firstName: String!
  lastName: String
  dream: String
  country: String
  emailAddress: String
  askedForEmailAddress: Boolean
  successorOfCirclesAddress: String
  circlesAddress: String
  circlesSafeOwner: String
  circlesTokenAddress: String
  avatarUrl: String
  avatarCid: String
  avatarMimeType: String
  newsletter: Boolean
  displayTimeCircles: Boolean
  cityGeonameid: Int
  displayCurrency: DisplayCurrency
  age: Int
  gender: Gender
}

type Tag {
  id: Int!
  typeId: String!
  value: String
  order: Int
}

input CreateTagInput {
  typeId: String!
  value: String
}

input UpsertTagInput {
  id: Int
  typeId: String!
  value: String
}

type ExchangeTokenResponse {
  success: Boolean!
  errorMessage: String
}

type LogoutResponse {
  success: Boolean!
  errorMessage: String
}

type SessionInfo {
  isLoggedOn: Boolean!
  hasProfile: Boolean
  profileId: Int
  profile: Profile
  capabilities: [Capability!]!
  useShortSignup: Boolean
}

type Capability {
  type: CapabilityType
}

enum CapabilityType {
  Verify
  Invite
  Translate
  PreviewFeatures
  Tickets
  VerifiedByHumanode
}

type Version {
  major: Int!
  minor: Int!
  revision: Int!
}

input RequestUpdateSafeInput {
  newSafeAddress: String!
}

type RequestUpdateSafeResponse {
  success: Boolean!
  errorMessage: String
  challenge: String
}

input UpdateSafeInput {
  signature: String!
}

type UpdateSafeResponse {
  success: Boolean!
  errorMessage: String
  newSafeAddress: String
}

input QueryCitiesByNameInput {
  name_like: String!
  languageCode: String
}

input QueryCitiesByGeonameIdInput {
  geonameid: [Int!]!
}

input QueryCitiesInput {
  byName: QueryCitiesByNameInput
  byId: QueryCitiesByGeonameIdInput
}

interface ICity {
  geonameid: Int!
  name: String!
  country: String!
  population: Int!
  latitude: Float!
  longitude: Float!
  feature_code: String!
}

input OfferInput {
  id: Int
  createdByProfileId: Int!
  title: String!
  pictureUrl: String!
  pictureMimeType: String!
  description: String
  allergens: String
  minAge: Int
  currentInventory: Int
  pricePerUnit: String!
  timeCirclesPriceShare: Int!
}

type SalesLine {
  id: Int!
  metadata: String
  amount: Int!
  offer: Offer!
  shop: Shop
}

type Invoice {
  id: Int!
  purchaseId: Int!
  purchase: Purchase
  sellerAddress: String!
  sellerProfile: Profile
  deliveryMethod: DeliveryMethod!
  buyerAddress: String!
  buyerProfile: Profile
  createdAt: String
  lines: [InvoiceLine!]
  invoiceNo: String!
  pickupCode: String
  simplePickupCode: String
  buyerSignature: Boolean
  buyerSignedDate: String
  sellerSignature: Boolean
  sellerSignedDate: String
  paymentTransactionHash: String
  paymentTransaction: ProfileEvent
  cancelledAt: String
  cancelReason: String
  cancelledBy: Profile
  deliveryAddress: PostAddress
}

type DeliveryMethod {
  id: Int!
  name: String!
}

type PurchaseLine {
  id: Int!
  metadata: String
  amount: Int!
  offer: Offer
  shop: Shop
}

type InvoiceLine {
  id: Int!
  amount: Int!
  offer: Offer
  shop: Shop
  metadata: String
}

input QueryTagsInput {
  typeId_in: [String!]!
  value_like: String
}

interface IEventPayload {
  transaction_hash: String
}

type CrcSignup implements IEventPayload {
  transaction_hash: String!
  user: String!
  user_profile: Profile
  token: String!
}

type CrcTrust implements IEventPayload {
  transaction_hash: String!
  address: String!
  address_profile: Profile
  can_send_to: String!
  can_send_to_profile: Profile
  limit: Int!
}

type Erc20Transfer implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile
  to: String!
  to_profile: Profile
  token: String!
  value: String!
}

type CrcTokenTransfer implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile
  to: String!
  to_profile: Profile
  token: String!
  value: String!
}

type CrcHubTransfer implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile
  to: String!
  to_profile: Profile
  flow: String!
  transfers: [CrcTokenTransfer!]!
  tags: [Tag!]!
}

type CrcMinting implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile
  to: String!
  to_profile: Profile
  value: String!
  token: String!
}

type EthTransfer implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile
  to: String!
  to_profile: Profile
  value: String!
  tags: [Tag!]!
}

type GnosisSafeEthTransfer implements IEventPayload {
  transaction_hash: String!
  initiator: String!
  from: String!
  from_profile: Profile
  to: String!
  to_profile: Profile
  value: String!
  tags: [Tag!]!
}

type ChatMessage implements IEventPayload {
  id: Int!
  transaction_hash: String
  from: String!
  from_profile: Profile
  to: String!
  to_profile: Profile
  text: String!
}

type MembershipOffer implements IEventPayload {
  transaction_hash: String
  createdBy: String!
  createdBy_profile: Profile
  isAdmin: Boolean!
  organisation: String!
  organisation_profile: Organisation
}

type MemberAdded implements IEventPayload {
  transaction_hash: String
  createdBy: String!
  createdBy_profile: Profile
  member: String!
  member_profile: Profile
  isAdmin: Boolean!
  organisation: String!
  organisation_profile: Organisation
}

type NewUser implements IEventPayload {
  transaction_hash: String
  profile: Profile!
}

type MembershipAccepted implements IEventPayload {
  transaction_hash: String
  createdBy: String!
  createdBy_profile: Profile
  member: String!
  member_profile: Profile
  organisation: String!
  organisation_profile: Organisation
}

type MembershipRejected implements IEventPayload {
  transaction_hash: String
  member: String!
  member_profile: Profile
  organisation: String!
  organisation_profile: Organisation
}

type InvitationCreated implements IEventPayload {
  transaction_hash: String
  name: String!
  code: String!
}

type InvitationRedeemed implements IEventPayload {
  transaction_hash: String
  name: String!
  code: String!
  redeemedBy: String
  redeemedBy_profile: Profile
}

type WelcomeMessage implements IEventPayload {
  transaction_hash: String
  invitedBy: String!
  invitedBy_profile: Profile
}

type OrganisationCreated implements IEventPayload {
  transaction_hash: String
  organisation: String!
  organisation_profile: Organisation
}

type SaleEvent implements IEventPayload {
  transaction_hash: String
  buyer: String!
  buyer_profile: Profile
  invoice: Invoice
}

type Purchased implements IEventPayload {
  transaction_hash: String
  seller: String!
  seller_profile: Profile
  purchase: Purchase!
}

type SafeVerified implements IEventPayload {
  transaction_hash: String
  organisation: String!
  organisation_profile: Organisation
  safe_address: String!
}

interface IAggregatePayload {
  lastUpdatedAt: String
}

type Erc721Tokens implements IAggregatePayload {
  lastUpdatedAt: String!
  balances: [Erc721Token!]!
}

type Contacts implements IAggregatePayload {
  lastUpdatedAt: String!
  contacts: [Contact!]!
}

type Memberships implements IAggregatePayload {
  lastUpdatedAt: String!
  organisations: [Organisation!]!
}

type Members implements IAggregatePayload {
  lastUpdatedAt: String!
  members: [ProfileOrOrganisation!]!
}

type Offers implements IAggregatePayload {
  lastUpdatedAt: String!
  offers: [Offer!]!
}

type Purchases implements IAggregatePayload {
  lastUpdatedAt: String!
  purchases: [Purchase!]!
}

type Sales implements IAggregatePayload {
  lastUpdatedAt: String!
  sales: [Sale!]!
}

union EventPayload =
    CrcSignup
  | CrcTrust
  | CrcTokenTransfer
  | CrcHubTransfer
  | CrcMinting
  | EthTransfer
  | Erc20Transfer
  | GnosisSafeEthTransfer
  | ChatMessage
  | MembershipOffer
  | MembershipAccepted
  | MembershipRejected
  | WelcomeMessage
  | InvitationCreated
  | InvitationRedeemed
  | OrganisationCreated
  | MemberAdded
  | SaleEvent
  | Purchased
  | SafeVerified
  | NewUser

enum EventType {
  CrcSignup
  CrcTrust
  CrcTokenTransfer
  CrcHubTransfer
  Erc20Transfer
  CrcMinting
  EthTransfer
  GnosisSafeEthTransfer
  ChatMessage
  MembershipOffer
  MembershipAccepted
  MembershipRejected
  WelcomeMessage
  InvitationCreated
  InvitationRedeemed
  OrganisationCreated
  MemberAdded
  SaleEvent
  Purchased
  SafeVerified
  NewUser
}

enum AggregateType {
  CrcBalances
  Erc20Balances
  Contacts
  Memberships
  Members
  Offers
  Purchases
  Sales
  Erc721Tokens
}

type AssetBalance {
  token_symbol: String
  token_address: String!
  token_owner_address: String!
  token_owner_profile: Profile
  token_balance: String!
}

type Erc721Token {
  token_symbol: String
  token_name: String
  token_address: String!
  token_owner_address: String!
  token_owner_profile: Profile
  token_no: String!
  token_url: String!
}

enum ContactDirection {
  In
  Out
}

type ContactPoint {
  name: String!
  directions: [ContactDirection!]!
  values: [String!]!
  timestamps: [String!]!
}

union AggregatePayload =
    CrcBalances
  | Erc20Balances
  | Contacts
  | Memberships
  | Members
  | Offers
  | Sales
  | Purchases
  | Erc721Tokens

type ProfileAggregate {
  type: String!
  safe_address: String!
  safe_address_profile: Profile
  payload: AggregatePayload!
}

type PublicEvent {
  timestamp: String!
  block_number: Int
  transaction_index: Int
  transaction_hash: String
  type: String!
  contact_address: String
  contact_address_profile: Profile
  payload: EventPayload
}

type NotificationEvent {
  type: String!
  from: String!
  to: String!
  itemId: Int
  transaction_hash: String
}

type CreatedInvitation {
  createdBy: Profile
  createdByProfileId: Int!
  createdAt: String!
  claimedBy: Profile
  claimedByProfileId: Int
  claimedAt: String
  name: String!
  address: String!
  balance: String!
  code: String!
}

type ClaimInvitationResult {
  success: Boolean!
  claimedInvitation: ClaimedInvitation
}

type RedeemClaimedInvitationResult {
  success: Boolean!
  error: String
  transactionHash: String
}

type CreatedInviteEoa {
  for: String!
  address: String!
  fee: String!
}

type CreateInvitationResult {
  success: Boolean!
  error: String
  createdInviteEoas: [CreatedInvitation!]!
}

type SendMessageResult {
  success: Boolean!
  error: String
  event: ProfileEvent
}

enum TrustDirection {
  IN
  OUT
  MUTUAL
}

type TrustRelation {
  safeAddress: String!
  safeAddressProfile: Profile
  otherSafeAddress: String!
  otherSafeAddressProfile: Profile
  direction: TrustDirection!
}

type CommonTrust {
  type: String!
  safeAddress1: String!
  safeAddress2: String!
  profile: Profile
}

type TagTransactionResult {
  success: Boolean!
  error: String
  tag: Tag
}

type CreateOrganisationResult {
  success: Boolean!
  error: String
  organisation: Organisation
}

input UpsertOrganisationInput {
  id: Int
  name: String!
  description: String
  circlesAddress: String
  avatarUrl: String
  largeBannerUrl: String
  smallBannerUrl: String
  productListingType: ProductListingType
  avatarMimeType: String
  cityGeonameid: Int
  displayCurrency: DisplayCurrency
}

type AddMemberResult {
  success: Boolean!
  error: String
}

type AcceptMembershipResult {
  success: Boolean!
  error: String
}

type RejectMembershipResult {
  success: Boolean!
  error: String
}

type RemoveMemberResult {
  success: Boolean!
  error: String
}

input PurchaseLineInput {
  offerId: Int!
  shopId: Int!
  amount: Int!
  metadata: String
}

type ProofPaymentResult {
  acknowledged: Boolean!
}

type AnnouncePaymentResult {
  invoiceId: Int!
  transactionHash: String!
  pickupCode: String!
  simplePickupCode: String
}

type VerifySafeResult {
  success: Boolean!
}

type i18n {
  lang: String
  key: String
  createdBy: String
  version: Int
  value: String
  pagination_key: String
  needsUpdate: Boolean
}

enum SortOrder {
  ASC
  DESC
}

input PaginationArgs {
  continueAt: String
  continueAtId: Int
  order: SortOrder!
  limit: Int!
}

enum Direction {
  in
  out
}

input PurchasedEventFilter {
  id: Int!
}

input SaleEventFilter {
  invoiceId: Int
  pickupCode: String
}

input ChatMessageEventFilter {
  id: Int!
}

input ProfileEventFilter {
  direction: Direction
  from: String
  to: String
  with: String
  transactionHash: String
  purchased: PurchasedEventFilter
  sale: SaleEventFilter
  chatMessage: ChatMessageEventFilter
}

input ContactAggregateFilter {
  addresses: [String!]!
}

input CrcBalanceAggregateFilter {
  tokenAddresses: [String!]!
}

input OffersAggregateFilter {
  createdByAddresses: [String!]
  offerIds: [Int!]
}

input PurchasesAggregateFilter {
  createdByAddresses: [String!]
  purchaseIds: [Int!]
  pickupCode: String
}

input SalesAggregateFilter {
  createdByAddresses: [String!]
  salesIds: [Int!]
  pickupCode: String
}

input ProfileAggregateFilter {
  contacts: ContactAggregateFilter
  crcBalance: CrcBalanceAggregateFilter
  offers: OffersAggregateFilter
  purchases: PurchasesAggregateFilter
  sales: SalesAggregateFilter
}

enum AccountType {
  Person
  Organisation
}

type SafeInfo {
  type: AccountType!
  safeAddress: String!
  lastUbiAt: String
  tokenAddress: String
  randomValue: String
  safeProfile: Profile
}

type SafeAddressByOwnerResult {
  type: String!
  safeAddress: String!
}

input VerifiedSafesFilter {
  addresses: [String!]
}

type LeaderboardEntry {
  createdByCirclesAddress: String!
  createdByProfile: Profile
  inviteCount: Int!
}

type FibonacciGoals {
  lastGoal: Int!
  currentValue: Int!
  nextGoal: Int!
}

type MyInviteRank {
  rank: Int!
  redeemedInvitationsCount: Int!
}

type Stats {
  profilesCount: Int!
  verificationsCount: Int!
  leaderboard: [LeaderboardEntry!]!
  goals: FibonacciGoals!
  myRank: MyInviteRank!
}

type TransitiveTransfer {
  isHubTransfer: Boolean
  from: String!
  to: String!
  token: String!
  tokenOwner: String!
  value: String!
}

type TransitivePath {
  requestedAmount: String!
  flow: String!
  success: Boolean!
  transfers: [TransitiveTransfer!]!
}

input ShopInput {
  id: Int
  enabled: Boolean!
  private: Boolean
  name: String!
  description: String!
  legalText: String
  largeBannerUrl: String!
  smallBannerUrl: String!
  shopListingStyle: ShopListingStyle!
  sortOrder: Int
  productListingStyle: ProductListingType!
  ownerId: Int!
  openingHours: String
  privacyPolicyLink: String
  tosLink: String
  healthInfosLink: String
  adultOnly: Boolean
  deliveryMethodIds: [Int!]
}

type ShopCategory {
  id: Int!
  createdAt: Date
  shop: Shop
  shopId: Int!
  private: Boolean
  enabled: Boolean
  name: String!
  description: String
  largeBannerUrl: String
  smallBannerUrl: String
  sortOrder: Int
  productListingStyle: ProductListingType
  entries: [ShopCategoryEntry!]
}

input ShopCategoryInput {
  id: Int
  shopId: Int!
  private: Boolean
  enabled: Boolean
  name: String!
  description: String
  largeBannerUrl: String
  smallBannerUrl: String
  sortOrder: Int
  productListingStyle: ProductListingType
}

type ShopCategoryEntry {
  id: Int!
  createdAt: Date!
  private: Boolean
  enabled: Boolean
  product: Offer
  productId: Int!
  productVersion: Int!
  sortOrder: Int
  shopCategory: ShopCategory
  shopCategoryId: Int!
}

input ShopCategoryEntryInput {
  id: Int
  private: Boolean
  enabled: Boolean
  name: String
  shopCategoryId: Int!
  productId: Int!
  productVersion: Int!
  sortOrder: Int
}

type UpsertShopCategoriesResult {
  inserted: Int!
  updated: Int!
}

type UpsertShopCategoryEntriesResult {
  inserted: Int!
  updated: Int!
}

type ProofUniquenessResult {
  existingSafe: String
}

input PostAddressInput {
  id: Int
  name: String
  notificationEmail: String
  street: String!
  house: String!
  zip: String!
  cityGeonameid: Int!
}

input OfferByIdAndVersionInput {
  offerId: Int!
  offerVersion: Int
}

type Mutation {
  payWithPath(from: String!, to: String!, amount: String!): TransitivePath!
  announcePayment(invoiceId: Int!, transactionHash: String!): AnnouncePaymentResult!
  purchase(lines: [PurchaseLineInput!]!, deliveryMethodId: Int!, deliveryAddressId: Int): [Invoice!]!
  completePurchase(invoiceId: Int!, revoke: Boolean): Invoice!
  completeSale(invoiceId: Int!, revoke: Boolean): Invoice!
  confirmLegalAge(age: Int!): Boolean!
  logout: LogoutResponse!
  upsertProfile(data: UpsertProfileInput!): Profile!
  requestUpdateSafe(data: RequestUpdateSafeInput!): RequestUpdateSafeResponse!
  updateSafe(data: UpdateSafeInput!): UpdateSafeResponse!
  upsertTag(data: UpsertTagInput!): Tag!
  upsertShippingAddress(data: PostAddressInput!): PostAddress
  deleteShippingAddress(id: Int!): PostAddress
  upsertOrganisation(organisation: UpsertOrganisationInput!): CreateOrganisationResult!
  upsertRegion(organisation: UpsertOrganisationInput!): CreateOrganisationResult!
  upsertShop(shop: ShopInput!): Shop!
  upsertShopCategories(shopCategories: [ShopCategoryInput!]!): UpsertShopCategoriesResult!
  upsertShopCategoryEntries(shopCategoryEntries: [ShopCategoryEntryInput!]!): UpsertShopCategoryEntriesResult!
  upsertOffer(offer: OfferInput!): Offer!
  addMember(groupId: String!, memberAddress: String!): AddMemberResult
  acceptMembership(membershipId: Int!): AcceptMembershipResult
  removeMember(groupId: String!, memberAddress: String!): RemoveMemberResult
  rejectMembership(membershipId: Int!): RejectMembershipResult
  acknowledge(until: Date!, safeAddress: String): Boolean!
  createTestInvitation: CreateInvitationResult!
  claimInvitation(code: String!): ClaimInvitationResult!
  redeemClaimedInvitation: RedeemClaimedInvitationResult!
  tagTransaction(transactionHash: String!, tag: CreateTagInput!): TagTransactionResult!
  sendMessage(fromSafeAddress: String, toSafeAddress: String!, content: String!): SendMessageResult!
  requestSessionChallenge(address: String!): String!
  verifySessionChallenge(challenge: String!, signature: String!): ExchangeTokenResponse
  importOrganisationsOfAccount: [Organisation!]!
  verifySafe(safeAddress: String!): VerifySafeResult!
  revokeSafeVerification(safeAddress: String!): VerifySafeResult!
  proofUniqueness(humanodeToken: String!): ProofUniquenessResult!
  updateValue(lang: String, key: String, createdBy: String, value: String): i18n
  addNewLang(langToCreate: String, langToCopyFrom: String): Int
  createNewStringAndKey(lang: String, key: String, createdBy: String, value: String, version: Int): i18n
  setStringUpdateState(key: String): [i18n]
}

type ExportProfile {
  lastChange: Date!
  circlesAddress: String!
  displayName: String!
  avatarUrl: String
}

type ExportTrustRelation {
  lastChange: Date!
  trusterAddress: String!
  trusteeAddress: String!
  trustLimit: Int!
}

type RandomAccount {
  privateKey: String
  address: String
}

type Query {
  version: Version!
  sessionInfo: SessionInfo!
  init: SessionInfo!
  claimedInvitation: ClaimedInvitation
  invitationTransaction: ProfileEvent
  hubSignupTransaction: ProfileEvent
  safeInfo(safeAddress: String): SafeInfo
  lastAcknowledgedAt(safeAddress: String!): Date
  verifications(pagination: PaginationArgs, filter: VerifiedSafesFilter): [Verification!]!
  events(
    types: [EventType!]!
    safeAddress: String!
    pagination: PaginationArgs!
    filter: ProfileEventFilter
  ): [ProfileEvent!]!
  aggregates(types: [AggregateType!]!, safeAddress: String!, filter: ProfileAggregateFilter): [ProfileAggregate!]!
  shops(ownerId: Int): [Shop!]!
  shopsById(ids: [Int!]!): [Shop!]!
  shop(id: Int!, ownerId: Int): Shop
  organisations(pagination: PaginationArgs): [Organisation!]!
  regions(pagination: PaginationArgs): [Organisation!]!
  organisationsByAddress(addresses: [String!]!): [Organisation!]!
  myInvitations: [CreatedInvitation!]!
  commonTrust(safeAddress1: String!, safeAddress2: String!): [CommonTrust!]!
  trustRelations(safeAddress: String!): [TrustRelation!]!
  myProfile: Profile
  profilesById(ids: [Int!]!): [Profile!]!
  recentProfiles(pagination: PaginationArgs): [Profile!]!
  profilesBySafeAddress(safeAddresses: [String!]!): [Profile!]!
  findSafesByOwner(owner: String!): [SafeInfo!]!
  search(query: SearchInput!): [Profile!]!
  stats: Stats!
  deliveryMethods: [DeliveryMethod]
  cities(query: QueryCitiesInput!): [City!]!
  tags(query: QueryTagsInput!): [Tag!]!
  tagById(id: Int!): Tag
  offerById(id: Int!): Offer!
  offersByIdAndVersion(query: [OfferByIdAndVersionInput!]!): [Offer!]!
  directPath(from: String!, to: String!, amount: String!): TransitivePath!
  paymentPath(from: String!, to: String!, amount: String!): TransitivePath!
  invoice(invoiceId: Int!): String
  findInvitationCreator(code: String!): Profile
  clientAssertionJwt: String!
  getStringByMaxVersion(lang: String, key: String): i18n
  getAvailableLanguages: [i18n]
  getAllStringsByMaxVersion: [i18n]
  getAllStringsByMaxVersionAndLang(lang: String): [i18n]
  getOlderVersionsByKeyAndLang(key: String, lang: String): [i18n]
  getPaginatedStrings(pagination_key: String, key: String, lang: String, value: String): [i18n]
  getPaginatedStringsToUpdate(pagination_key: String, key: String, lang: String, value: String): [i18n]
  allProfiles(sinceLastChange: Date): [ExportProfile]!
  allTrusts(sinceLastChange: Date): [ExportTrustRelation!]!
  getRandomAccount: RandomAccount
  signMessage(message: String!, key: String!): String!
  getStringsToBeUpdatedAmount(lang: String, key: String): Int
}

type Subscription {
  events: NotificationEvent!
}
